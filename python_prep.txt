1.) Identifying data 

'True' = string 
False = boolean 
(1,2,3) = tuple 
1.5 = float 
[1,2,3] = list 
2 = int
range(5) = range 
{1, 2, 3} = set 
None = NoneValue 
{'foo': 'bar'} = dictionary 

2.) Create a tuple called names that contains several pet names.   

name = ('Asta', 'Butterscotch', 'Pudding', 'Neptune', 'Darwin') 

--Python Operands--

3.) Use the REPL and the arithmetic operators to extract
 the individual digits of 4936:

>>> digits = 4963 
>>> one_place = digits % 10 
>>> one_place 
3
>>> digits //= 10 
>>> tens_place = digits % 10 
>>> tens_place 
6
>>> digits //= 10 
>>> hundreds_place = digits % 10 
>>> hundreds_place 
9
>>> digits //= 10 
>>> thousands_place = digits 
>>> thousands_place 
4

4.) What does the following code do and why? print('5' + '10')

>>> 510 because string concatenation

5.) Refactor code from previous excercise to use coercion to print 15 instead

print(int('5') + int('10')) 

6.) Will an error occur if you try to access a list element with an index greater than or equal to the list's length? For example:

foo = ['a', 'b', 'c']
print(foo[3])      # will this result in an error? 

Yes, IndexError: list index out of range will occur. 

7.) To what value does the following expression evaluate?

'foo' == 'Foo'

False, because capitalization matters in strings. 

8.) What will the following code do? Why?

int('3.1415')
3 because integers are whole numbers. 

9.) To what value does the following expression evaluate?

'12' < '9'
True because lexoconically '1' > '9' and the '2' will not be compared.  

--Variables--

1.)
Classify the following potential non-constant variable names as
 idiomatic, non-idiomatic, or illegal.
 For the non-idiomatic and illegal names, explain your choice.

index = idiomatic (doesn't break any rules and is easily readible) 
CatName = non-idiomatic (capitalized camel case is not typically used) 
lazy_dog = idiomatic
quick_Fox = non-idiomatic(capital letter is non-conventional) 
1stCharacter = illegal (begins with a number)
operand2 = idiomatic
BIG_NUMBER = non-idiomatic 
π = non-idiomatic (extended ASCII character) 

2.) Classify the following potential function names as
 idiomatic, non-idiomatic, or illegal.
 For the non-idiomatic and illegal names, explain your choice.
* functions have the same general rules as variables. 

Name = non-idiomatic
index = idiomatic 
CatName = non-idiomatic
lazy_dog = idiomatic 
quick_Fox = non-idiomatic 
1stCharacter = illegal 
operand2 = idiomatic 
BIG_NUMBER = non-idiomatic 
π = non-idiomatic 

3.) Classify the following potential constant names as
 idiomatic, non-idiomatic, or illegal.
 For the non-idiomatic and illegal names, explain your choice.

Name = non-idiomatic 
index = non-idiomatic 
CatName = non-idiomatic 
snake_case = non-idiomatic 
LAZY_DOG3 = idiomatic 
1ST = illegal 
operand2 = non-idiomatic 
BIG_NUMBER = idiomatic 
Π = non-idiomatic 

4.) Classify the following potential class names as idiomatic, non-idiomatic, or illegal. For the non-idiomatic and illegal names, explain your choice.

index = non-idiomatic 
CatName = idiomatic 
Lazy_Dog = non-idiomatic 
1ST = illegal 
operand2 = non-idiomatic 
BigNumber3 = idiomatic 
Πi = non-idiomatic 

5.) Write a program named greeter.py that greets 'Victor' three times.
 Your program should use a variable and
 not hard code the string value 'Victor' in each greeting

name = 'Victor' 
print("Good Morning," + name + '.') 
print("Good Morning," + name + '.')
print("Good Morning," + name + '.')

6.) Write a program named age.py that includes someone's age
 and then calculates and reports the future age 10, 20, 30, and 40 years
 from now.

age = int(input('How old are you? '))

print(age)
print(f'In 10 years, you will be {age + 10} years old.')
print(f'In 20 years, you will be {age + 20} years old.')
print(f'In 30 years, you will be {age + 30} years old.')

8.)

 account = 1000
interest = 0.05
time = int(input("Over how many years: "))

def expect(account, interest, time):
    for i in range(time): 
        account += account * 0.05
    return account 
    
final_amount = expect(account, interest, time)
print(final_amount) 


10.) Assume that obj already has a value of 42 when the code below starts
 running. Which of the subsequent statements reassign the variable?
 Which statements mutate the value of the object that obj references?
 Which statements do neither?

obj = 'ABcd' = reassigned
obj.upper() = neither 
obj = obj.lower() = reassignment
print(len(obj)) = neither
obj = list(obj) = reassignment
obj.pop() = mutated 
obj[2] = 'X' = mutated
obj.sort() = mutated
set(obj) = neither  
obj = tuple(obj) = reassignment

--Funtions and Methods--

4.) 
def multiply_numbers(num1, num2, num3):
    result = num1 * num2 * num3
    return result

product = multiply_numbers(2, 3, 4)

Identify the following items in that code:

function name = multipy_numbers (lines 1 & 5) 
function arguments = 2,3,4
function definition = lines 1-3 
function body = lines 2 & 3 
function parameters = (num1, num2, num3) 
function invocation =  multiply_number(2,3,4) (only on line 5)
function return value = 24 
all identifiers = multipy_numbers, num2, num2, num3, result, product 

14.) Identify all of the identifiers on each line of the following code.


def multiply(left, right):                            #multiply, left, right 
    return left * right                               # left, right
 
def get_num(prompt):                                      #get_num, prompt
    return float(input(prompt))                           #prompt

first_number = get_num('Enter the first number: ')    #first_number, get_num
second_number = get_num('Enter the second number: ')  #second_number, get_num
product = multiply(first_number, second_number)   #product, first & second_num 
print(f'{first_number} * {second_number} = {product}')#first & sec_num, prod     

15.) 
line 1: multiply (global) left, right (local) 
line 2: left, right (local) 
line 4: get_num (global) prompt(local) 
line 5: float(built-in), input(built-in), prompt(local) 
line 7: first_number(global), get_num(global) 
line 8: second_number(global), get_num(global) 
line 9: product(global), multiply(global), first_num(local), sec_num(local)
line 10: print(built-in), first(global), second(global), product(global) 


16.) 
function_name(parameters)
line 1: multiply(left, right) 
line 4: get_num(prompt) 
line 5: float , input *built-in functions 
line 10: print *built-in function

--Flow Control--

1.) 
False or (True and False)  #False 
True or (1 + 2)            #True
(1 + 2) or True            #(1 + 2) 
True and (1 + 2)           #(1 + 2) 
False and (1 + 2)          #False 
(1 + 2) and True           #True
(32 * 4) >= 129            #False
False != (not True)        #False 
True == 4                  #False
False == (847 == '847')    #True  

2.)
 def even_or_odd(number):
    if number % 2 != 0: 
        print(f'{number} is odd')
    else: 
        print(f'{number} is even')
        
4.)
return ('bar' if foo() else qux())

if foo(): 
    return 'bar' 
else: 
    return qux()

6.) 
def cap_or_not(string):
    if len(string) > 10: 
        return string.upper()
    else: 
        return string 

print(cap_or_not('morgan wallen'))
>>> MORGAN WALLEN

7.) 
def number_range(number):
    if 0 < number <= 50: 
        print(f'{number} is between 0 and 50.')
    elif 51 < number <= 100: 
        print(f'{number} is between 50 and 100.')
    elif number < 100: 
        print(f'{number} is greater than 100.')
    else: 
        print(f'{number} is less than 0.') 

