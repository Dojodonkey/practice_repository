1.) In your own words,
 explain the difference between these two expressions.

my_object1 == my_object2  	#Value Equality
				#True
				#values == to each other.
				#assumming the values are 
				#the same for both variables. 
			     
my_object1 is my_object2	#Object Equality
				#True 
				#the variables are 
				#stored at different addresses
				#in the stack (assuming they
				# do however
				#point to the same address
				#in the heap.) 
			
2.) Without running this code, what will it print? Why?

set1 = {42, 'Monty Python', ('a', 'b', 'c')}
set2 = set1
set1.add(range(5, 10))
print(set2)

>>> {42, 'Monty Python', ('a', 'b', 'c'), range(5,10)} 
#because set1 & set2 point to the same object, when set1 is 
#mutated, set2 is mutated as well because it points to the same
#address in the heap. 

3.) Without running this code, what will it print? Why?

dict1 = {
    "Hitchhiker's Guide to the Galaxy": 42,
    'Monty Python': 'The Life of Brian',
    'Airplane!': "Don't call me Shirley!",
}

dict2 = dict(dict1)
dict2['Monty Python'] = 'Holy Grail'
print(dict1['Monty Python'])

>>>The Life of Brian 
#This is because on line 39, by using the constructor 
#call (dict()), a shallow copy is made of dict1 and given 
#address fro dict2. 
#Any changes to dict2 will not mutate dict1 and vice versa. 

4.) Without running this code, what will it print? Why?

dict1 = {
    'a': [1, 2, 3],
    'b': (4, 5, 6),
}

dict2 = dict(dict1)
dict1['a'][1] = 42
print(dict2['a'])

>>> [1,42,3] #all the type call (dict()) creates a seperately 
#stored value, because the list of 'a' is nested, it will not 
#be affected due to only being a shallow copy. So the values in
#the list are still a shared reference between dict1 and dict2.

5.) Write some code to create a deep copy of
 the dict1 object and assign it to dict2.
 You should only modify the code where indicated.

# You may modify this line
**import copy** 

dict1 = {
    'a': [[7, 1], ['aa', 'aaa']],
    'b': ([3, 2], ['bb', 'bbb']),
}

dict2 = ** copy.deepcopy(dict1) **


# All of these should print False
print(dict1         is dict2)
print(dict1['a']    is dict2['a'])
print(dict1['a'][0] is dict2['a'][0])
print(dict1['a'][1] is dict2['a'][1])
print(dict1['b']    is dict2['b'])
print(dict1['b'][0] is dict2['b'][0])
print(dict1['b'][1] is dict2['b'][1])


6.) The following program is nearly identical to
 that of the previous exercise.
 However, this time, it should create a shallow copy of dict1.
 Be careful: you're not allowed to use the copy module
 in this exercise.`

In addition, before you run this code,
 can you predict the output values?

dict1 = {
    'a': [{7, 1}, ['aa', 'aaa']],
    'b': ({3, 2}, ['bb', 'bbb']),
}

dict2 = dict(dict1) 

print(dict1         is dict2)          #False
print(dict1['a']    is dict2['a'])     #True
print(dict1['a'][0] is dict2['a'][0])  #True
print(dict1['a'][1] is dict2['a'][1])  #True
print(dict1['b']    is dict2['b'])     #True
print(dict1['b'][0] is dict2['b'][0])  #True
print(dict1['b'][1] is dict2['b'][1])  #True
